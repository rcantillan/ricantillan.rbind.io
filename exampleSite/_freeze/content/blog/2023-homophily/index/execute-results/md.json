{
  "hash": "0d9d1dc2f887d78dba9444ed5849c86e",
  "result": {
    "markdown": "---\ndate: 2022-10-26\n\ntitle: homophily\nsubtitle: Is everywhere!\nauthor: Roberto Cantillan\n\nshow_post_date: true\nshow_author_byline: true\n\ndraft: false\n\nsummary: |\n    Follow me on a journey to build this website. The idea is to have a \n    system that has the fewest steps as  possible to go from a blog post on \n    my computer to a website living online. Among other, I discuss about \n    Quarto, Hugo, Github, and Netlify.\n\nformat: hugo\n\nfreeze: auto\n---\n\n\n\n## libraries\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ergm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: network\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'network' 1.18.1 (2023-01-24), part of the Statnet Project\n* 'news(package=\"network\")' for changes since last version\n* 'citation(\"network\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'ergm' 4.5.0 (2023-05-27), part of the Statnet Project\n* 'news(package=\"ergm\")' for changes since last version\n* 'citation(\"ergm\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n'ergm' 4 is a major update that introduces some backwards-incompatible\nchanges. Please type 'news(package=\"ergm\")' for a list of major\nchanges.\n```\n:::\n\n```{.r .cell-code}\nlibrary(ergm.ego)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: egor\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: dplyr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: tibble\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'ergm.ego' 1.0.1 (2022-05-26), part of the Statnet Project\n* 'news(package=\"ergm.ego\")' for changes since last version\n* 'citation(\"ergm.ego\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ergm.ego'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:ergm':\n\n    COLLAPSE_SMALLEST, snctrl\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    sample\n```\n:::\n\n```{.r .cell-code}\nlibrary(car)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: carData\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'car'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    recode\n```\n:::\n\n```{.r .cell-code}\nlibrary(egor)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ ggplot2   3.4.2     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ car::recode()   masks dplyr::recode()\n✖ purrr::some()   masks car::some()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(texreg)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nVersion:  1.38.6\nDate:     2022-04-06\nAuthor:   Philip Leifeld (University of Essex)\n\nConsider submitting praise using the praise or praise_interactive functions.\nPlease cite the JSS article in your publications -- see citation(\"texreg\").\n\nAttaching package: 'texreg'\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n```\n:::\n\n```{.r .cell-code}\nlibrary(prioritizr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sp\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\nLoading required package: raster\n\nAttaching package: 'raster'\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\nLoading required package: sf\nLinking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE\nLoading required package: proto\n```\n:::\n\n```{.r .cell-code}\nlibrary(questionr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'questionr'\n\nThe following object is masked from 'package:raster':\n\n    freq\n```\n:::\n:::\n\n\n## data\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"/home/rober/Documents/ricantillan.rbind.io/dat/ELSOC/ELSOC_W02_v3.00_R.RData\")\nload(\"/home/rober/Documents/ricantillan.rbind.io/dat/ELSOC/ELSOC_W04_v2.01_R.RData\")\nload(\"/home/rober/Documents/ricantillan.rbind.io/dat/ELSOC/ELSOC_W01_v4.01_R.RData\")\n```\n:::\n\n\n\nI recently noticed that I probably don't spend as much time writing as I \nshould. *This is the kind of thoughts you can get by doing a\nPhD*. This post is me trying to  address this problem. Let's write more, let's\nblog. \n\nAs a first post, I decided to offer a small tour of this website. Or rather,\nof how it works. Let's go on an adventure!\n\n# A Fresh New Start\n\n{{{< figure src=\"img/Fig14_A_600.gif\" caption=\"Homophily\" >}}}\n\nSo, to start blogging. The first thing one needs to do so is a website. I had\none, but I wasn't really enthusiastic about it anymore. So all I had to do was\nto build a new system that would work for me. Ideally, this system should \nbe minimal--meaning that it should have as few steps as possible between the \nwriting of a blog post and its posting, and it should be super easy to show \ncode running (because that's what I'd like to put here).\n\nIn the end, I decided to use some pieces of software that I had used \nbefore and adopt some other. I would use [Quarto](https://quarto.org/) \nto write the blog post and the code it contains, [Hugo](https://gohugo.io/) to \ngenerate a static website, and to ditch my old-fashioned Academic theme for \nthe refreshing [Apéro](https://github.com/hugo-apero/). Here how it works. \n\n## Quarto to Write and Run the Code\n\nYou probably won't be surprised to learn that the first step of blogging is \nwriting. And **I write in what is called Quarto documents**.\n\n[Quarto](https://quarto.org/) is a relatively new piece of tech developed by \nthe amazing software engineers at [Posit](https://www.rstudio.com/) \n(ex-RStudio). Basically, it offers a way to **combine text and code into a\nsingle document**. You can run R, Python, or Julia from one place, and then \ndecide to turn the annotated results as a PDF file, a markdown document or even a \nPowerPoint presentation. \n\nThe main reasons I picked Quarto are twofold. It is **familiar** and \n**powerful**. First, familiar. Quarto looks a lot like the old \n[Rmarkdown](https://rmarkdown.rstudio.com/) format I was used to[^1]. This \nreduces by a fair amount what I would have to learn to \nbuild the website. Second, it supports a lot of languages, and even though R \nis--and will always remain--my first love, I have to say that I am looking \nforward to playing with Python (now that I have figured out how to configure my \nenvironment). Quarto appears to be an amazing tool for people with this \npolyglot mindset.\n\n[^1]: Actually, Quarto and Rmarkdown play well together, and it was a 5 minutes\njob to convert an old Rmarkdown blog post into a new Quarto one.\n\nIn terms of organization, each of my blog post has its own folder which \ncontains a Quarto document where I write the post (an `\"index.qmd\"`). As I said \nearlier, this document mixes some writing and some code and is used to \nproduce an output. When I am done with a post, a `quarto render` command\nin my terminal will **produce a document with the code evaluated within**. In \nother words, a Quarto containing a code chunk with a `read_csv(...)` call in \nit, it will render a document that will show the actual content of the csv I want \nto open.\n\n\n## Hugo to Write the Website\n\nA website, most of the time, is nothing more than some files in [HTML \nformat](https://en.wikipedia.org/wiki/HTML) put together and served on the \ninternet. And, **to turn my markdown files into a bunch of files that can be \nserved**, I decided to use is a \n[static website generator](https://en.wikipedia.org/wiki/Static_site_generator)\ncalled [Hugo](https://gohugo.io/).\n\nThe job of a static website generator, as the name suggests, is to build a \nwebsite whose content won't change very often. This is not the case of your \nregular social network that has a feed changing any time you go there. Static\nwebsites are mostly used for product pages, documentation, or blogs. A feature \nthat is especially interesting with static websites is that they do not require\na [backend](https://en.wikipedia.org/wiki/Frontend_and_backend) to run. \n**Once the website built, it can live its life by itself forever**. This \nshould hopefully reduce the need for me to learn new things to\nput the blog online. \n\nSo, back to [Hugo](https://gohugo.io/). The basic idea here is that it will\n**take my collection of markdown files and turns them into a website**. For \nHugo to do its job, the only thing I had to do is to organize my files onto \nmy computer in a way that is understable. Basically, my blog posts needed\nto be on a `content/` folder, and I had to put a config file in the root \ndirectory.\n\nIn a nutshell, all I have to do now is run `hugo server` in a terminal for \n**Hugo to build my website** and serve it onto a local server. How convenient?\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}